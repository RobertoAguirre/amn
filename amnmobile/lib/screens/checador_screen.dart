import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart' as p;
import 'dart:async';
import '../services/checador_service.dart';
import '../services/auth_service.dart';
import '../config/app_config.dart';

class ChecadorScreen extends StatefulWidget {
  const ChecadorScreen({super.key});

  @override
  State<ChecadorScreen> createState() => _ChecadorScreenState();
}

class _ChecadorScreenState extends State<ChecadorScreen> {
  late Database _db;
  bool _initialized = false;
  bool _isSaving = false;
  Timer? _locationTimer;
  Position? _lastPosition;

  // Datos del usuario autenticado
  String empleadoId = '';
  String empleadoNombre = '';
  String plantaId = '';
  String plantaNombre = '';

  Future<Position?> _obtenerUbicacionConPermisoYTimeout(BuildContext context) async {
    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
    }
    if (permission == LocationPermission.denied || permission == LocationPermission.deniedForever) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Permiso de ubicaci√≥n denegado. No se puede registrar ubicaci√≥n.')),
        );
      }
      return null;
    }
    
    // Verificar si el GPS est√° habilitado
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Servicios de ubicaci√≥n deshabilitados. Habil√≠talos en configuraci√≥n.')),
        );
      }
      return null;
    }
    
    try {
      return await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.best, // M√°xima precisi√≥n
        timeLimit: Duration(seconds: AppConfig.locationTimeoutSeconds),
        forceAndroidLocationManager: false, // Usar Google Play Services si est√° disponible
      );
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error al obtener ubicaci√≥n: $e')),
        );
      }
      return null;
    }
  }

  @override
  void initState() {
    super.initState();
    _initDatabase();
    _cargarDatosUsuario();
    _iniciarTimerUbicacion();
    _registrarUbicacionAlAbrir();
  }

  @override
  void dispose() {
    _locationTimer?.cancel();
    super.dispose();
  }

  void _iniciarTimerUbicacion() {
    _locationTimer = Timer.periodic(
      Duration(seconds: AppConfig.locationIntervalSeconds),
      (timer) => _enviarUbicacionAutomatica(),
    );
    print('üïê [Checador] Timer de ubicaci√≥n iniciado: cada ${AppConfig.locationIntervalSeconds} segundos');
  }

  Future<void> _enviarUbicacionAutomatica() async {
    if (!mounted) return;
    
    try {
      final posicion = await _obtenerUbicacionConPermisoYTimeout(context);
      if (posicion == null) return;

      // Verificar si se movi√≥ lo suficiente para enviar
      if (_lastPosition != null) {
        final distancia = Geolocator.distanceBetween(
          _lastPosition!.latitude,
          _lastPosition!.longitude,
          posicion.latitude,
          posicion.longitude,
        );
        
        if (distancia < AppConfig.locationDistanceFilter) {
          print('üìç [Checador] Dispositivo no se movi√≥ lo suficiente (${distancia.toStringAsFixed(1)}m < ${AppConfig.locationDistanceFilter}m)');
          return;
        }
      }

      _lastPosition = posicion;
      
      // Usar hora local de M√©xico (UTC-6) con mejor manejo de zona horaria
      final now = DateTime.now();
      final mexicoTime = now.toUtc().add(const Duration(hours: -6));
      
      await _initDatabase();
      await _db.insert('eventos', {
        'empleadoId': empleadoId,
        'empleadoNombre': empleadoNombre,
        'plantaId': plantaId,
        'plantaNombre': plantaNombre,
        'tipoEvento': 'ubicacion',
        'fechaHora': mexicoTime.toIso8601String(),
        'latitud': posicion.latitude,
        'longitud': posicion.longitude,
        'precision': posicion.accuracy,
        'sincronizado': 0,
      });

      // Sincronizar inmediatamente
      final service = ChecadorService();
      await service.sincronizarEventos();
      
      print('üìç [Checador] Ubicaci√≥n autom√°tica enviada: ${posicion.latitude}, ${posicion.longitude} (precisi√≥n: ${posicion.accuracy}m)');
      print('üïê [Checador] Hora local M√©xico: ${mexicoTime.toLocal()}');
      print('üîÑ [Checador] Sincronizaci√≥n iniciada...');
      
    } catch (e) {
      print('‚ùå [Checador] Error en env√≠o autom√°tico: $e');
    }
  }

  Future<void> _cargarDatosUsuario() async {
    try {
      final authService = AuthService();
      final user = await authService.getCurrentUser();
      if (user != null) {
        setState(() {
          empleadoId = user.numeroEmpleado;
          empleadoNombre = user.nombre;
          plantaId = 'PLANTA_001'; // Valor por defecto
          plantaNombre = 'Planta Principal'; // Valor por defecto
        });
        print('üë§ [Checador] Usuario cargado: $empleadoNombre ($empleadoId)');
      }
    } catch (e) {
      print('‚ùå [Checador] Error cargando datos de usuario: $e');
    }
  }

  Future<void> _initDatabase() async {
    if (_initialized) return;
    final dbPath = await getDatabasesPath();
    final path = p.join(dbPath, AppConfig.databaseName);
    _db = await openDatabase(
      path,
      version: AppConfig.databaseVersion,
      onCreate: (db, version) async {
        await db.execute('''
          CREATE TABLE eventos(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            empleadoId TEXT NOT NULL,
            empleadoNombre TEXT NOT NULL,
            plantaId TEXT,
            plantaNombre TEXT,
            tipoEvento TEXT NOT NULL,
            fechaHora TEXT NOT NULL,
            latitud REAL NOT NULL,
            longitud REAL NOT NULL,
            precision REAL,
            sincronizado INTEGER NOT NULL DEFAULT 0
          )
        ''');
        print('üóÑÔ∏è [Checador] Base de datos SQLite creada');
      },
    );
    _initialized = true;
  }

  Future<void> _registrarUbicacionAlAbrir() async {
    final posicion = await _obtenerUbicacionConPermisoYTimeout(context);
    if (posicion == null) return;
    
    // Usar hora local de M√©xico (UTC-6) con mejor manejo de zona horaria
    final now = DateTime.now();
    final mexicoTime = now.toUtc().add(const Duration(hours: -6));
    
    await _initDatabase();
    await _db.insert('eventos', {
      'empleadoId': empleadoId,
      'empleadoNombre': empleadoNombre,
      'plantaId': plantaId,
      'plantaNombre': plantaNombre,
      'tipoEvento': 'apertura_app',
      'fechaHora': mexicoTime.toIso8601String(),
      'latitud': posicion.latitude,
      'longitud': posicion.longitude,
      'precision': posicion.accuracy,
      'sincronizado': 0,
    });
    
    _lastPosition = posicion;
    
    if (mounted) {
      try {
        final service = ChecadorService();
        await service.sincronizarEventos();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('üìç Ubicaci√≥n enviada: ${posicion.latitude.toStringAsFixed(6)}, ${posicion.longitude.toStringAsFixed(6)}'),
            backgroundColor: Colors.green,
          ),
        );
        print('‚úÖ [Checador] Ubicaci√≥n inicial enviada y sincronizada');
      } catch (e) {
        print('‚ùå [Checador] Error sincronizando ubicaci√≥n inicial: $e');
      }
    }
  }

  Future<void> _registrarEvento(String tipoEvento) async {
    if (_isSaving) return;
    
    setState(() {
      _isSaving = true;
    });

    try {
      final posicion = await _obtenerUbicacionConPermisoYTimeout(context);
      if (posicion == null) {
        setState(() {
          _isSaving = false;
        });
        return;
      }

      // Usar hora local de M√©xico (UTC-6) con mejor manejo de zona horaria
      final now = DateTime.now();
      final mexicoTime = now.toUtc().add(const Duration(hours: -6));
      
      await _initDatabase();
      await _db.insert('eventos', {
        'empleadoId': empleadoId,
        'empleadoNombre': empleadoNombre,
        'plantaId': plantaId,
        'plantaNombre': plantaNombre,
        'tipoEvento': tipoEvento,
        'fechaHora': mexicoTime.toIso8601String(),
        'latitud': posicion.latitude,
        'longitud': posicion.longitude,
        'precision': posicion.accuracy,
        'sincronizado': 0,
      });

      // Sincronizar inmediatamente
      final service = ChecadorService();
      await service.sincronizarEventos();

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚úÖ $tipoEvento registrado correctamente'),
            backgroundColor: Colors.green,
          ),
        );
      }
      
      print('‚úÖ [Checador] Evento "$tipoEvento" registrado y sincronizado');
      
    } catch (e) {
      print('‚ùå [Checador] Error registrando evento: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Error: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isSaving = false;
        });
      }
    }
  }

  Widget _buildButton(String text, Color color, String tipoEvento) {
    return Expanded(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
        child: ElevatedButton(
          onPressed: _isSaving ? null : () => _registrarEvento(tipoEvento),
          style: ElevatedButton.styleFrom(
            backgroundColor: color,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 20),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
          child: _isSaving
              ? const CircularProgressIndicator(color: Colors.white)
              : Text(
                  text,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Checador de Actividades'),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () async {
              final authService = AuthService();
              await authService.logout();
              if (mounted) {
                Navigator.of(context).pushReplacementNamed('/login');
              }
            },
          ),
        ],
      ),
      body: Column(
        children: [
          // Informaci√≥n del usuario
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            color: Colors.grey[100],
            child: Column(
              children: [
                Text(
                  'Empleado: $empleadoNombre',
                  style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 4),
                Text(
                  'ID: $empleadoId',
                  style: const TextStyle(fontSize: 14, color: Colors.grey),
                ),
                const SizedBox(height: 4),
                Text(
                  'Planta: $plantaNombre',
                  style: const TextStyle(fontSize: 14, color: Colors.grey),
                ),
              ],
            ),
          ),
          
          // Botones de actividades
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  _buildButton('Simular entrada a planta', Colors.blue, 'simular_entrada'),
                  _buildButton('Inicio de trabajo', Colors.green, 'inicio_trabajo'),
                  _buildButton('Comida', Colors.orange, 'comida'),
                  _buildButton('Reanudar trabajo', Colors.teal, 'reanudar_trabajo'),
                  _buildButton('Cierre', Colors.red, 'cierre'),
                ],
              ),
            ),
          ),
          
          // Informaci√≥n de rastreo
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            color: Colors.blue[50],
            child: Column(
              children: [
                const Text(
                  'üïê Rastreo Autom√°tico Activo',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 4),
                Text(
                  'Ubicaci√≥n cada ${AppConfig.locationIntervalSeconds} segundos',
                  style: const TextStyle(fontSize: 12),
                ),
                Text(
                  'Precisi√≥n: ${AppConfig.desiredAccuracy}m',
                  style: const TextStyle(fontSize: 12),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
